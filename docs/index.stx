#title(`STX Documentation`)

<toc(title:`Table of Contents`)>

= STX

STX is a markup language for creating documents.
It is designed to be simple enough to be easily written but at the same time
powerful enough to allow creating complex documents.

A document in STX is generated by a single self-describing text file;
the [output format] and [document meta-data] is embedded in the file.
External content can be included from other resources using [directives].

Despite part of the syntax is based on Markdown and AsciiDoc, STX is not an 
extension. In order to achieve advanced features, most of the [syntax] is 
different and stricter.

= Features

== Structured

The text written in STX generates documents represented by a hierarchycal 
component structure described in the [Document Model] section.

Building a document using components makes it possible to have ""inifite""
nesting and the option to render it to multiple [output formats].

Nesting rules are based on the text alignment. Whenever there is [block mark], 
the content can be nested following the 
aligment of the subsequent text. The content can be broken just by breaking 
the alignment or by using the `%` symbol.

== Cross References

Since the STX documents are structured, cross references are easy to generate
and validate. Text between brackets are considered links, the target reference
can be customatized by appending it between parenthesis after the closing bracket.
Broken references are validated generating a warning.

+++ code:stx
- [Simple link]
- [Link with explicit reference](this the reference)
- [External link](http://www.example.com)
+++
:^ Different ways of creating links.

The matching algorithm for validating references ignores the case and only 
considers words using ASCII letters and numbers. 
A reference like `\[this]` is equivalent than `\[THIS]`.

Only [sections] are automatically referenceable by using the heading text,
if there are more than one section with the same reference, the algorithm
starts appending a number.

Multiple and custom references are supported by adding the `ref` attribute
to some component.

+++ code:stx
@ref(`other options`, `more options`)
- Other option 1.
- Other option 2.

Please see [other options].
+++
:^ Custom references.

== Numbering

== Output Formats

=== HTML

HTMLBook

=== JSON

= Syntax

@ref(`block mark`)
== Block

_mark_ _[inline-space]_ _[content]_

|= Mark     | Description
|- `=`      | Section 1
|- `==`     | Section 2
|- `===`    | Section 3
|- `====`   | Section 4
|- `=====`  | Section 5
|- `======` | Section 6
|- `-`      | Unordered list item
|- `.`      | Ordered list item
|- `\|=`    | table h row mark
|- `\|-`    | table d row mark
|- `::`     | pre caption mark
|- `:^`     | post caption mark

== Inline

|= Syntax                | Description
|- `\*` _content_ `\*`   | Inline strong text.
|- `\_` _content_ `\_`   | Inline emphasized text.
|- `\`` _content_ `\``   | Inline code sample.
|- `\~~` _content_ `\~~` | Inline strikethrough text.
|- `\""` _content_ `\""` | Inline typographic quotation primary marks.
|- `\''` _content_ `\''` | Inline typographic quotation secondary marks.
|- `\[` _content_ `]`                  | Inline link with implicit reference.
|- `\[` _content_ `](` _reference_ `)` | Inline link with explicit reference.
|- `\|` _content_ | Inline table cell (only inside a row mark).
|- `\...'` | Inline ellipsis symbol.

== Functions and Containers

|= Syntax                             | Description
|- `\{` _content_ `}`                 | Simple container.
|- `\{` _content_ `}\<` _[entry]_ `>` | Capturing block
|- `\<` _[entry]_ `>\{` _content_ `}` | Capturing block
|- `\<` _[entry]_ `>`                 | Simple macro.

|- `+++` _[entry]_ _[end of line]_ <br>
   _literal text_ <br>
   `+++` _[end of line]_      | code block mark

== Meta

|- `@` _[value]_ | Attribute for the next component.
|- `%` _content_ | Break

= Document Model

== Document

@ref(components)
== Component

== Section

=== Syntax

+++ code:stx
= Section A

Content Section A

== Section A/B

Content Section A/B
+++

+++ code:xml
<section>
    <heading>Section A</heading>
    <content>
        <paragraph>Content Section A</paragraph>
        <section>
            <heading>Section A/B</heading>
            <content>
                <paragraph>Content Section A/B</paragraph>
            </content>
        </section>
    </content>
</section
+++

=== Model

|= Content   | Type        | Description
|- `heading` | [Component] | 
|- `content` | [Component] |

=== Attributes

|= Content   | Type        | Description
|- `type`    | [Token]     | 
|- `number`  | [Token]     | Number of the section, this value is
                             assigned automatically.

== Content Box

!!! warning
= Warning

This is a warning box.
!!!

== Figure

== Image

== Code Block

== List Block

=== Table

== Captured Text

== Link Text

== Macro Text

== Paragraph

== Plain Text

== StyledText

== Table of Contents

+++ code:stx
#toc
+++

= Data Syntax

== Token


== Entry


== Group


= Quick-reference

+++ code:stx
= Section 1
== Section 2
=== Section 3
==== Section 4
===== Section 5
====== Section 6

Paragraph starts, *strong text* _emphasized text_ `inline code sample`,
paragraph continues, [Cross Reference], [Custom Text](cross reference),
both previous links points to the same reference defined using `@ref(...)`,
last paragraph line, [External Link](http://www.example.com).

@ref(`cross reference`)
- Item 1, this unordered list is the target component...
- Item 2, ...for those links that points to `cross reference`

Typographic quotation marks examples: ""surrounded by primary marks"",
and ''surrounded by secondary marks''.

. Ordered list item 1.
. Ordered list item 2.

:: Table caption before component.
|= Column Header | Column Header
|- Normal cell   | Normal cell
%
|- This is a brand new table, the mark `%` breaks any component.

\+++ code:stx
Literal content marked as `stx` language.
\+++

<img(https://github.com/favicon.ico)>
:^ Image caption after component (results in a figure).

Inline reference {here}<ref>, [link to the previous reference](here).

!!! note
Inner content is processed by the `note` function resulting in a note box.
!!!
+++


#stylesheets(
    assets/layout.css,
    assets/style.css
)

<embed(assets/layout.html)>

#output(format: html, target: ./index.html)
#output(format: json, target: ./index.json)
