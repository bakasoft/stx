#title(`STX Documentation`)

<toc(title:`Table of Contents`)>

= STX

STX is a markup language for creating documents.
It is designed to be simple enough to be easily read and written but at the 
same time powerful enough to allow creating complex documents.

A document in STX is generated by a single self-describing text file;
the [output format] and [document meta-data] is embedded in the file.
External content can be included from other resources using [directives].

Despite part of the syntax is based on Markdown and AsciiDoc, STX is not an 
extension. In order to achieve advanced features, most of the [syntax] is 
different and *stricter*.

= Features

Most of the features are oriented to help to create technical and academic
documents.

== Structured Documents

The text written in STX generates documents represented by a hierarchycal 
component structure described in the [Document Model] section.

Building a document using components makes it possible to have ""inifite""
nesting and the option to render it to multiple [output formats].

Nesting rules are based on the text alignment. Whenever there is [block mark], 
the content can be nested following the aligment of the subsequent text. 
The content can be broken just by breaking the alignment or by using the
`%` symbol.

+++ code:stx
|= Column 1 | Column 2
|- Cell     | - Nested list (item 1).
              - Item 2 with nested code block.
                +++ code
                This is nested in item2.
                +++
+++
:^ Example of nested components.

== Cross References

Since the STX documents are structured, cross references are easy to 
generate and validate. Text between brackets are considered links, the 
target reference can be customatized by appending it between parenthesis 
Broken references are validated generating a warning.

+++ code:stx
[Simple link]
[Link with explicit reference](this the reference)
[External link](http://www.example.com)
+++
:^ Different ways to create links.

The matching algorithm for validating references ignores the case and only 
considers words using ASCII letters and numbers. 
A reference like `\[this]` is equivalent than `\[THIS]`.

Only [sections] are automatically referenceable by using the heading text,
if a section attempts to create duplicated references, the algorithm
starts appending a number.

Custom references are supported by adding the `ref` attribute to any 
component.

+++ code:stx
@ref(`other options`, `more options`)
- Other option 1.
- Other option 2.

Please see [other options], it also works with [more options].
+++
:^ Custom references.

== Numbering

Since the documents in STX are organized by sections, they can be easily 
numbered. Each section, figure and table are automatically numbered.

Additionally, there is a function for generating a [Table of Contents].
All numbers of sections, figures and tables of this document were 
auto-generated as well as the table of contents.

@ref(`output format`)
== Output Formats

While develop a new output format is not a trivial task, 
STX is designed to be modular so that the output formats can be plugged in. 
The current supported output formats are described in this section.

Since STX document are stand-alone, the output format is specified by using
directives in the same document. A document can have any number of output
formats.

=== HTML

This output format generates one single HTML5 file. The document structure 
is completely based on the [HTMLBook](https://oreillymedia.github.io/HTMLBook/) 
specification, a great unofficial draft from Oâ€™Reilly Media, Inc.

+++ code:stx
#output(format: html, target: index.html)
+++
:^ Specifying the HTML output format in a document.

Since this is the main format for rendering STX documents, some directives
are optimized for HTML, example:

+++ code:stx
#stylesheets(
    assets/layout.css,
    assets/style.css
)
+++
:^ Linking CSS stylesheets in a document.

Another useful feature for creating HTML documents is the `embed` function,
which integrates the content from another file directly in the document.

+++ code:stx
<embed(assets/layout.html)>
+++
:^ Embedding an HTML fragment into the document.

=== JSON

This output format generates a JSON file with the raw structure of the 
document. This format is not optimized for human reading but can be useful
for debugging and using it with other tools.

+++ code:stx
#output(format: json, target: index.json)
+++
:^ Specifying the JSON output format in a document.

= Syntax

The STX syntax is stricter then other markup languages. 
Having a malformed component will cause a compilation error.

Since this is a markup language as well, the marks in the text together 
with the text alignment makes it possible to create complex documents.
This section describes the different types of marks and its syntax.

@ref(`block mark`)
== Block Components

This type of components are able to contain more components inside, 
they are the building blocks for a document.

Block marks are not recognized inside inline content, consequently,
paragraphs cannot begin with a block mark.

=== Sections

There are 6 levels of sections, compared with other markup languages,
sections here are not just titles, they contain all subsequent components
until a section with a level equal or less is found.

+++ code:stx
= Section A                (1.)
== Section B     (inside A: 1.1)
=== Section C    (inside B: 1.1.1)
==== Section D   (inside C: 1.1.1.1)
===== Section E  (inside D: 1.1.1.1.1)
====== Section F (inside E: 1.1.1.1.1.1)
====== Section G (inside E: 1.1.1.1.1.2)
===== Section H  (inside D: 1.1.1.1.2)
==== Section I   (inside C: 1.1.1.2)
=== Section J    (inside B: 1.1.2)
== Section K     (inside A: 1.2)
= Section L                (2.)
+++
:^ Example of nested sections.

The content of the section must be aligned with the section mark:

+++ code:stx
=== Heading content

Section content.
+++
:^ Text alignment in a section.

=== Lists



|= Mark     | Description
|- `-`      | Unordered list item
|- `.`      | Ordered list item

=== Tables

|- `\|=`    | table h row mark
|- `\|-`    | table d row mark

=== Captions

|- `::`     | pre caption mark
|- `:^`     | post caption mark

=== Paragraphs

== Inline

|= Syntax                | Description
|- `\*` _content_ `\*`   | Inline strong text.
|- `\_` _content_ `\_`   | Inline emphasized text.
|- `\`` _content_ `\``   | Inline code sample.
|- `\~~` _content_ `\~~` | Inline strikethrough text.
|- `\""` _content_ `\""` | Inline typographic quotation primary marks.
|- `\''` _content_ `\''` | Inline typographic quotation secondary marks.
|- `\[` _content_ `]`                  | Inline link with implicit reference.
|- `\[` _content_ `](` _reference_ `)` | Inline link with explicit reference.
|- `\|` _content_ | Inline table cell (only inside a row mark).
|- `\...` | Inline ellipsis symbol.

== Functions and Containers

|= Syntax                             | Description
|- `\{` _content_ `}`                 | Simple container.
|- `\{` _content_ `}\<` _[entry]_ `>` | Capturing block
|- `\<` _[entry]_ `>\{` _content_ `}` | Capturing block
|- `\<` _[entry]_ `>`                 | Simple macro.

|- `+++` _[entry]_ _[end of line]_ <br>
   _literal text_ <br>
   `+++` _[end of line]_      | code block mark

== Meta

|- `@` _[value]_ | Attribute for the next component.
|- `%` _content_ | Break

= Document Model

== Document

@ref(components)
== Component

== Section

=== Syntax

+++ code:stx
= Section A

Content Section A

== Section A/B

Content Section A/B
+++

+++ code:xml
<section>
    <heading>Section A</heading>
    <content>
        <paragraph>Content Section A</paragraph>
        <section>
            <heading>Section A/B</heading>
            <content>
                <paragraph>Content Section A/B</paragraph>
            </content>
        </section>
    </content>
</section
+++

=== Model

|= Content   | Type        | Description
|- `heading` | [Component] | 
|- `content` | [Component] |

=== Attributes

|= Content   | Type        | Description
|- `type`    | [Token]     | 
|- `number`  | [Token]     | Number of the section, this value is
                             assigned automatically.

== Content Box

!!! warning
= Warning

This is a warning box.
!!!

== Figure

== Image

== Code Block

== List Block

=== Table

== Captured Text

== Link Text

== Macro Text

== Paragraph

== Plain Text

== StyledText

== Table of Contents

+++ code:stx
#toc
+++

= Data Syntax

== Token


== Entry


== Group


= Quick-reference

+++ code:stx
= Section 1
== Section 2
=== Section 3
==== Section 4
===== Section 5
====== Section 6

Paragraph starts, *strong text* _emphasized text_ `inline code sample`,
paragraph continues, [Cross Reference], [Custom Text](cross reference),
both previous links points to the same reference defined using `@ref(...)`,
last paragraph line, [External Link](http://www.example.com).

@ref(`cross reference`)
- Item 1, this unordered list is the target component...
- Item 2, ...for those links that points to `cross reference`

Typographic quotation marks examples: ""surrounded by primary marks"",
and ''surrounded by secondary marks''.

. Ordered list item 1.
. Ordered list item 2.

:: Table caption before component.
|= Column Header | Column Header
|- Normal cell   | Normal cell
%
|- This is a brand new table, the mark `%` breaks any component.

\+++ code:stx
Literal content marked as `stx` language.
\+++

<img(https://github.com/favicon.ico)>
:^ Image caption after component (results in a figure).

Inline reference {here}<ref>, [link to the previous reference](here).

!!! note
Inner content is processed by the `note` function resulting in a note box.
!!!
+++


#stylesheets(
    assets/layout.css,
    assets/style.css
)

<embed(assets/layout.html)>

#output(format: html, target: ./index.html)
#output(format: json, target: ./index.json)
